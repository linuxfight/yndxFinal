// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostCalculateData, PostCalculateResponse, PostCalculateError, GetExpressionsData, GetExpressionsResponse, GetExpressionsError, GetExpressionsByIdData, GetExpressionsByIdResponse, GetExpressionsByIdError, PostLoginData, PostLoginResponse, PostLoginError, PostRegisterData, PostRegisterResponse, PostRegisterError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Добавить математическое выражение из чисел, знаков [+, -, *, /, (, )] в очередь на выполнение. Возвращает ULID ID при успешном запросе
 */
export const postCalculate = <ThrowOnError extends boolean = false>(options: Options<PostCalculateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCalculateResponse, PostCalculateError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/calculate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Выражение состоит из ID (ULID), Result (0 или другое число) и Status (DONE - Успешно выполнено, FAILED - Ошибка при выполнении, PROCESSING - Выполняется). Возвращает список выражений при успешном запросе
 */
export const getExpressions = <ThrowOnError extends boolean = false>(options?: Options<GetExpressionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExpressionsResponse, GetExpressionsError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/expressions',
        ...options
    });
};

/**
 * Выражение состоит из ID (ULID), Result (0 или другое число) и Status (DONE - Успешно выполнено, FAILED - Ошибка при выполнении, PROCESSING - Выполняется). Возвращает выражение при успешном запросе
 */
export const getExpressionsById = <ThrowOnError extends boolean = false>(options: Options<GetExpressionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExpressionsByIdResponse, GetExpressionsByIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/expressions/{id}',
        ...options
    });
};

/**
 * Войти в аккаунт
 * Войти в аккаунт с помощью логина и пароля. Возвращает JWT API Token при успешном запросе
 */
export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponse, PostLoginError, ThrowOnError>({
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Зарегистрировать новый аккаунт
 * Создать новый аккаунт с помощью логина и пароля. Возвращает JWT API Token при успешном запросе
 */
export const postRegister = <ThrowOnError extends boolean = false>(options: Options<PostRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRegisterResponse, PostRegisterError, ThrowOnError>({
        url: '/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};