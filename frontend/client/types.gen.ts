// This file is auto-generated by @hey-api/openapi-ts

export type DtoApiError = {
    code?: number;
    message?: string;
};

export type DtoAuthRequest = {
    login?: string;
    password?: string;
};

export type DtoAuthResponse = {
    token?: string;
};

export type DtoCalculateRequest = {
    expression?: string;
};

export type DtoCalculateResponse = {
    id?: string;
};

export type DtoExpression = {
    expression?: string;
    id?: string;
    result?: number;
    status?: string;
};

export type DtoGetByIdExpressionResponse = {
    expression?: DtoExpression;
};

export type DtoListAllExpressionsResponse = {
    expressions?: Array<DtoExpression>;
};

export type PostCalculateData = {
    /**
     * Объект, содержащий в себе выражение
     */
    body: DtoCalculateRequest;
    path?: never;
    query?: never;
    url: '/calculate';
};

export type PostCalculateErrors = {
    /**
     * Bad Request
     */
    400: DtoApiError;
    /**
     * Forbidden
     */
    403: DtoApiError;
    /**
     * Unprocessable Entity
     */
    422: DtoApiError;
    /**
     * Internal Server Error
     */
    500: DtoApiError;
};

export type PostCalculateError = PostCalculateErrors[keyof PostCalculateErrors];

export type PostCalculateResponses = {
    /**
     * OK
     */
    200: DtoCalculateResponse;
    /**
     * Created
     */
    201: DtoCalculateResponse;
};

export type PostCalculateResponse = PostCalculateResponses[keyof PostCalculateResponses];

export type GetExpressionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/expressions';
};

export type GetExpressionsErrors = {
    /**
     * Forbidden
     */
    403: DtoApiError;
    /**
     * Internal Server Error
     */
    500: DtoApiError;
};

export type GetExpressionsError = GetExpressionsErrors[keyof GetExpressionsErrors];

export type GetExpressionsResponses = {
    /**
     * OK
     */
    200: DtoListAllExpressionsResponse;
};

export type GetExpressionsResponse = GetExpressionsResponses[keyof GetExpressionsResponses];

export type GetExpressionsByIdData = {
    body?: never;
    path: {
        /**
         * 01JTE60CDWQ5R3QSWZBP8J6FG3
         */
        id: string;
    };
    query?: never;
    url: '/expressions/{id}';
};

export type GetExpressionsByIdErrors = {
    /**
     * Bad Request
     */
    400: DtoApiError;
    /**
     * Forbidden
     */
    403: DtoApiError;
    /**
     * Not Found
     */
    404: DtoApiError;
};

export type GetExpressionsByIdError = GetExpressionsByIdErrors[keyof GetExpressionsByIdErrors];

export type GetExpressionsByIdResponses = {
    /**
     * OK
     */
    200: DtoGetByIdExpressionResponse;
};

export type GetExpressionsByIdResponse = GetExpressionsByIdResponses[keyof GetExpressionsByIdResponses];

export type PostLoginData = {
    /**
     * Данные для входа
     */
    body: DtoAuthRequest;
    path?: never;
    query?: never;
    url: '/login';
};

export type PostLoginErrors = {
    /**
     * Bad Request
     */
    400: DtoApiError;
    /**
     * Unauthorized
     */
    401: DtoApiError;
    /**
     * Not Found
     */
    404: DtoApiError;
    /**
     * Unprocessable Entity
     */
    422: DtoApiError;
    /**
     * Internal Server Error
     */
    500: DtoApiError;
};

export type PostLoginError = PostLoginErrors[keyof PostLoginErrors];

export type PostLoginResponses = {
    /**
     * OK
     */
    200: DtoAuthResponse;
};

export type PostLoginResponse = PostLoginResponses[keyof PostLoginResponses];

export type PostRegisterData = {
    /**
     * Данные для регистрации
     */
    body: DtoAuthRequest;
    path?: never;
    query?: never;
    url: '/register';
};

export type PostRegisterErrors = {
    /**
     * Bad Request
     */
    400: DtoApiError;
    /**
     * Conflict
     */
    409: DtoApiError;
    /**
     * Unprocessable Entity
     */
    422: DtoApiError;
    /**
     * Internal Server Error
     */
    500: DtoApiError;
};

export type PostRegisterError = PostRegisterErrors[keyof PostRegisterErrors];

export type PostRegisterResponses = {
    /**
     * Created
     */
    201: DtoAuthResponse;
};

export type PostRegisterResponse = PostRegisterResponses[keyof PostRegisterResponses];

export type ClientOptions = {
    baseUrl: 'https://calc-backend.lxft.tech/api/v1' | (string & {});
};