// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package users

import (
	"context"
)

const create = `-- name: Create :exec
INSERT INTO users (
    id, username, password_hash
) VALUES (
             $1, $2, $3
         )
    RETURNING id, username, password_hash
`

type CreateParams struct {
	ID           string
	Username     string
	PasswordHash string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create, arg.ID, arg.Username, arg.PasswordHash)
	return err
}

const createSchema = `-- name: CreateSchema :exec
CREATE TABLE IF NOT EXISTS users (
    id VARCHAR(26) NOT NULL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL
)
`

func (q *Queries) CreateSchema(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createSchema)
	return err
}

const getById = `-- name: GetById :one
SELECT id, username, password_hash FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const getByName = `-- name: GetByName :one
SELECT id, username, password_hash FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getByName, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}
